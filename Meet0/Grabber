//GRABBER created on September 8th by Isaac Dienstag

//Package statement
package org.firstinspires.ftc.teamcode;

//Import statements
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Servo;

//Class declorations
public class Grabber {

    //Declare instance Motors
    private DcMotor sweeper;
    private DcMotor extender;
    private DigitalChannel isOut;

    //Declare private instance variables
    private int currentStatus = 0, prevStatus = 0;

    //Constructs a Grabber with two motor names and two motor directions
    public Grabber(DcMotor newSweeper, DcMotor newExtender, DcMotorSimple.Direction sweeperD, DcMotorSimple.Direction extenderD,  DigitalChannel newIsOut) {
        //Sets our private instance motors to the inputs
        sweeper = newSweeper;
        extender = newExtender;
        sweeper.setDirection(sweeperD);
        extender.setDirection(extenderD);
        isOut = newIsOut;
    } //End constructor

    //Checks if a number is too small to be considered intentional. If input <= deadzone, we ignore it, and output 0.
    //If input > deadzone, we return input, because the input is likely intentional.
    private double deadzone(double tolerance, double input){
        if(input > tolerance || input < -(tolerance))
            return input;
        else
            return 0;
    } //End double method

    //Returns true if input > deadzone, false if input <= deadzone
    private boolean outOfDeadzone(double tolerance, double input){
        return deadzone(tolerance, input) != 0;
    }

    //Reach asks for two doubles, and uses them to reach out and pull back
    public void reach(double lt, double rt) {
        //Checks to see if lt and rt are out of deadzone, sets power accordingly
        if(outOfDeadzone(.05, lt) && outOfDeadzone(.05, rt)){
            //If both are > deadzone, set extender's power to 0
            extender.setPower(0);
        }
        //If lt is out of the deadzone, and rt isn't, set extender's power to the negative of lt
        else if(outOfDeadzone(.05,lt)){
            extender.setPower(deadzone(.05, -(lt)));
        }
        //If rt is out of the deadzone, and ;t isn't, set extender's power to lt
        else if(outOfDeadzone(.05, rt)){
            extender.setPower(deadzone(.05, rt));
        }
        //If nothing is out of the deadzone, set extender's power to -
        else {
            extender.setPower(0);
        }
    } //End void method


    //Asks for two booleans, and uses them to determine the speed of sweeper motor
    public void intake(double pow){
        sweeper.setPower(deadzone(.05, pow)*Math.abs(pow));
    } //End void method
    public double getExtenderPower(){return extender.getPower();}

} //End class
