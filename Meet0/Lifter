//LIFTER created on September 8th by Isaac Dienstag

//Package statement
package org.firstinspires.ftc.teamcode;

//Import statements
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Servo;

//Class declaration
public class Lifter {
    //Declare instance Motor
    private DcMotor liftMotor;

    //Declare booleans
    private boolean liftToTop, dump;

    //Declare digital channels
    private DigitalChannel NotatTop;
    private DigitalChannel NotatBottom;
    private Servo dumper;

    //Constructs a Lifter with 1 motor, 1 motor direction, and 3 Digital channels
    public Lifter(DcMotor lifter1, DcMotorSimple.Direction lifter1D, DigitalChannel topLimit, DigitalChannel bottomLimit, Servo dumpServo) {
        //Sets instance variables to inputs
        liftMotor = lifter1;
        liftMotor.setDirection(lifter1D);
        NotatTop = topLimit;
        NotatBottom = bottomLimit;
        dumper = dumpServo;
    } //Ends constructor

    //Checks if a number is too small to be considered intentional. If input <= deadzone, we ignore it, and output 0.
    //If input > deadzone, we return input, because the input is likely intentional.
    private double deadzone(double tolerance, double input){
        if(input > tolerance || input < -(tolerance))
            return input;
        else
            return 0;
    } //End double method

    //Returns true if input > deadzone, false if input <= deadzone
    private boolean outOfDeadzone(double tolerance, double input){
        return deadzone(tolerance, input) != 0;
    }

    //Asks for two booleans, and uses them to determine the power of liftMotor
    public void lift(double lift, double drop) {
        if (outOfDeadzone(.05, lift) && outOfDeadzone(.05, drop))
            liftMotor.setPower(0);
        else if (outOfDeadzone(.05, lift) && NotatTop.getState())
            liftMotor.setPower(lift);
        else if (outOfDeadzone(.05, drop) && NotatBottom.getState())
            liftMotor.setPower(-drop);
        else
            liftMotor.setPower(0);
    }

    public void dump(boolean dumps) {
        if(dumps)
            dumper.setPosition(.3);
        else
            dumper.setPosition(.7);
    } //Ends void statement

    public double getLiftPower(){return liftMotor.getPower();}
} //Ends class
